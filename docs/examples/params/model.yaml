# The comments in blue marked as TODO need more information.

# Type of model that the rest of these parameters apply to.
model: CLA

# Version that specifies the format of the config.
version: 1

# The section "aggregationInfo" specifies what field to aggregate with which
# aggregation method.
#
# Example of how to aggregate the field "consumption" with the method "mean"
# and the field "gym" with the method "first". Both field will be
# aggregregated over a period of 1h 15m, according to their respective
# aggregation methods.
#
#   aggregationInfo:
#     fields:
#     - [consumption, sum]
#     - [gym, first]
#     minutes: 15
#     hours: 1
#
# See nupic.data.aggregator for more info about supported aggregation methods.
aggregationInfo:
  # "fields" should be a list of pairs. Each pair is a field name and an
  # aggregation function (e.g. sum). The function will be used to aggregate
  # multiple values of this field over the aggregation period.
  fields:
  - [consumption, mean]
  # If a time unit is not listed, 0 will be its default value.
  microseconds: 0
  milliseconds: 0
  minutes: 0
  months: 0
  seconds: 0
  hours: 1
  days: 0
  weeks: 0
  years: 0

# TODO: more details required
predictAheadTime: null

# Parameters of the model to be created.
modelParams:

  # The type of inference that this model will perform.
  # Supported values are :
  # - TemporalNextStep
  # - TemporalClassification
  # - NontemporalClassification
  # - TemporalAnomaly
  # - NontemporalAnomaly
  # - TemporalMultiStep
  # - NontemporalMultiStep
  inferenceType: TemporalMultiStep

  # Parameters of the Sensor region
  sensorParams:
    # Sensor diagnostic output verbosity control:
    # - verbosity == 0: silent
    # - verbosity in [1 .. 6]: increasing level of verbosity
    verbosity: 0

    # List of encoders and their parameters.
    encoders:
      consumption:
        fieldname: consumption
        name: consumption
        resolution: 0.88
        seed: 1
        type: RandomDistributedScalarEncoder
      timestamp_timeOfDay:
        fieldname: timestamp
        name: timestamp_timeOfDay
        timeOfDay: [21, 1]
        type: DateEncoder
      timestamp_weekend:
        fieldname: timestamp
        name: timestamp_weekend
        type: DateEncoder
        weekend: 21

    # The "sensorAutoReset" specifies the period for automatically generated
    # resets from a RecordSensor.
    #
    # If None, disable automatically generated resets. Also disable for all
    # values that evaluate to 0. Example:
    #   sensorAutoReset: null
    #
    #
    # Valid keys for the "sensorAutoReset" option:
    #   sensorAutoReset:
    #    days: <int>
    #     hours: <int>
    #     minutes: <int>
    #     seconds: <int>
    #     milliseconds: <int>
    #     microseconds: <int>
    #     weeks: <int>
    #
    # Example for an automated reset every 1.5 days:
    #   sensorAutoReset:
    #     days: 1
    #     hours: 12
    #
    sensorAutoReset: null


  # Controls whether the Spatial Pooler (SP) region is enabled.
  spEnable: true

  # Parameters of the SP region.
  spParams:
    # SP diagnostic output verbosity control:
    # - spVerbosity == 0: silent
    # - spVerbosity in [1..6]: increasing levels of verbosity
    spVerbosity: 0

    # Spatial Pooler implementation selector.
    # Values can be: "py" or "cpp" (speed optimized)
    spatialImp: cpp

    # TODO: more details required
    globalInhibition: 1

    # Number of mini-columns in the region. This values needs to be the same
    # as "columnCount" for the TM region (see "columnCount" under "tmParams").
    columnCount: 2048

    # TODO: how come this works with the value 0? Shouldn't it be equal to
    # the ouput width of the SensorRegion?
    inputWidth: 0

    # "numActiveColumnsPerInhArea" controls column inhibition in the SP region.
    # Maximum number of active columns in the SP region's output. If more SP
    # columns than "numActiveColumnsPerInhArea" are active then the weaker
    # columns are suppressed.
    numActiveColumnsPerInhArea: 40

    # TODO: more details required
    seed: 1956

    # "potentialPct" controls what percentage of the columns's receptive field
    # is available for potential synapses.
    potentialPct: 0.85

    # The default threshold for synapses. Any synapse whose permanence
    # value is above the connected threshold is a "connected synapse", meaning
    # it can contribute to the cell's firing. Typical value is 0.10.
    synPermConnected: 0.1

    # TODO: more details required
    synPermActiveInc: 0.04

    # TODO: more details required
    synPermInactiveDec: 0.005

    # "boostStrength" controls the strength of boosting. It should be a
    # a float greater or equal than 0.0. No boosting is applied if
    # boostStrength == 0.0. Boosting encourages efficient usage of SP columns.
    boostStrength: 3.0

  # Controls whether the Temporal Memory (TM) region is enabled.
  tpEnable: true

  # Parameters of the TM region.
  tpParams:
    # Controls the verbosity of the TM diagnostic output:
    # - verbosity == 0: silent
    # - verbosity in [1..6]: increasing levels of verbosity
    # See verbosity in nupic.research.TP for more details.
    verbosity: 0

    # Number of mini-columns in the region. This values needs to be the same
    # as "columnCount" for the SP region (see "columnCount" under "spParams").
    columnCount: 2048

    # The number of cells per column.
    cellsPerColumn: 32

    # Size of the TM region input. Must match the output width of the
    # previous region.
    inputWidth: 2048

    # TODO: more details required
    seed: 1960

    # Temporal implementation of the TM region.
    # Valid values are: 'py', 'cpp', 'tm_py', 'monitored_tm_py'
    temporalImp: cpp

    # The number of synapses added to a segment during learning
    newSynapseCount: 20

    # Maximum number of synapses per segment
    maxSynapsesPerSegment: 32

    # Maximum number of segments per cell
    maxSegmentsPerCell: 128

    # Initial permanence for newly created synapses
    initialPerm: 0.21

    # Permanence Increment
    permanenceInc: 0.1

    # Permanence Decrement
    permanenceDec: 0.1

    # TODO: more details required
    globalDecay: 0.0

    # TODO: more details required
    maxAge: 0

    # Minimum number of active synapses for a segment to be considered
    # during search for the best-matching segments.
    # None=use default
    # Replaces: tpMinThreshold
    minThreshold: 12

    # Segment activation threshold.
    # A segment is active if it has >= activationThreshold connected synapses
    # that are active. If set to null, then use default value.
    activationThreshold: 16

    # TODO: more details required
    outputType: normal

    # "Pay Attention Mode" length. This tells the TM Region how many new
    # elements to append to the end of a learned sequence at a time.
    # Smaller values are better for datasets with short sequences,
    # higher values are better for datasets with long sequences.
    pamLength: 1

  clParams:
    # Classifier diagnostic output verbosity control;
    # - verbosity == 0: silent
    # - verbosity in [1..6]: increasing levels of verbosity
    verbosity: 0

    # Name of the Classifier region.
    regionName: SDRClassifierRegion

    # This controls how fast the classifier learns/forgets. Higher
    # values make it adapt faster and forget older patterns faster.
    alpha: 0.1

    # This is set after the call to updateConfigFromSubConfig and is
    # computed from the aggregationInfo and predictAheadTime.
    steps: '1,5'

    # Values can be: "py" or "cpp" (speed optimized)
    implementation: cpp

  # TODO: more details required
  trainSPNetOnlyIfRequested: false


